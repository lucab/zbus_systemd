// This file is autogenerated, do not manually edit.

use crate::zbus::proxy;

/// Proxy object for `org.freedesktop.timesync1.Manager`.
#[proxy(
    interface = "org.freedesktop.timesync1.Manager",
    gen_blocking = false,
    default_service = "org.freedesktop.timesync1",
    default_path = "/org/freedesktop/timesync1"
)]
trait Manager {
    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetRuntimeNTPServers()) Call interface method `SetRuntimeNTPServers`.
    #[zbus(name = "SetRuntimeNTPServers")]
    fn set_runtime_ntp_servers(&self, runtime_servers: Vec<String>) -> crate::zbus::Result<()>;

    /// Get property `LinkNTPServers`.
    #[zbus(property(emits_changed_signal = "true"), name = "LinkNTPServers")]
    fn link_ntp_servers(&self) -> crate::zbus::Result<Vec<String>>;

    /// Get property `SystemNTPServers`.
    #[zbus(property(emits_changed_signal = "true"), name = "SystemNTPServers")]
    fn system_ntp_servers(&self) -> crate::zbus::Result<Vec<String>>;

    /// Get property `RuntimeNTPServers`.
    #[zbus(property(emits_changed_signal = "true"), name = "RuntimeNTPServers")]
    fn runtime_ntp_servers(&self) -> crate::zbus::Result<Vec<String>>;

    /// Get property `FallbackNTPServers`.
    #[zbus(property(emits_changed_signal = "true"), name = "FallbackNTPServers")]
    fn fallback_ntp_servers(&self) -> crate::zbus::Result<Vec<String>>;

    /// Get property `ServerName`.
    #[zbus(property(emits_changed_signal = "false"), name = "ServerName")]
    fn server_name(&self) -> crate::zbus::Result<String>;

    /// Get property `ServerAddress`.
    #[zbus(property(emits_changed_signal = "false"), name = "ServerAddress")]
    fn server_address(&self) -> crate::zbus::Result<(i32, Vec<u8>)>;

    /// Get property `RootDistanceMaxUSec`.
    #[zbus(property(emits_changed_signal = "const"), name = "RootDistanceMaxUSec")]
    fn root_distance_max_u_sec(&self) -> crate::zbus::Result<u64>;

    /// Get property `PollIntervalMinUSec`.
    #[zbus(property(emits_changed_signal = "const"), name = "PollIntervalMinUSec")]
    fn poll_interval_min_u_sec(&self) -> crate::zbus::Result<u64>;

    /// Get property `PollIntervalMaxUSec`.
    #[zbus(property(emits_changed_signal = "const"), name = "PollIntervalMaxUSec")]
    fn poll_interval_max_u_sec(&self) -> crate::zbus::Result<u64>;

    /// Get property `PollIntervalUSec`.
    #[zbus(property(emits_changed_signal = "false"), name = "PollIntervalUSec")]
    fn poll_interval_u_sec(&self) -> crate::zbus::Result<u64>;

    /// Get property `NTPMessage`.
    #[zbus(property(emits_changed_signal = "true"), name = "NTPMessage")]
    fn ntp_message(
        &self,
    ) -> crate::zbus::Result<(
        u32,
        u32,
        u32,
        u32,
        i32,
        u64,
        u64,
        Vec<u8>,
        u64,
        u64,
        u64,
        u64,
        bool,
        u64,
        u64,
    )>;

    /// Get property `Frequency`.
    #[zbus(property(emits_changed_signal = "false"), name = "Frequency")]
    fn frequency(&self) -> crate::zbus::Result<i64>;
}
