// This file is autogenerated, do not manually edit.

use crate::zbus::proxy;

/// Proxy object for `org.freedesktop.hostname1`.
#[proxy(
    interface = "org.freedesktop.hostname1",
    gen_blocking = false,
    default_service = "org.freedesktop.hostname1",
    default_path = "/org/freedesktop/hostname1"
)]
pub trait Hostnamed {
    /// [ğŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetHostname()) Call interface method `SetHostname`.
    #[zbus(name = "SetHostname")]
    fn set_hostname(&self, hostname: String, interactive: bool) -> crate::zbus::Result<()>;

    /// [ğŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetStaticHostname()) Call interface method `SetStaticHostname`.
    #[zbus(name = "SetStaticHostname")]
    fn set_static_hostname(&self, hostname: String, interactive: bool) -> crate::zbus::Result<()>;

    /// [ğŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetPrettyHostname()) Call interface method `SetPrettyHostname`.
    #[zbus(name = "SetPrettyHostname")]
    fn set_pretty_hostname(&self, hostname: String, interactive: bool) -> crate::zbus::Result<()>;

    /// [ğŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetIconName()) Call interface method `SetIconName`.
    #[zbus(name = "SetIconName")]
    fn set_icon_name(&self, icon: String, interactive: bool) -> crate::zbus::Result<()>;

    /// [ğŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetChassis()) Call interface method `SetChassis`.
    #[zbus(name = "SetChassis")]
    fn set_chassis(&self, chassis: String, interactive: bool) -> crate::zbus::Result<()>;

    /// [ğŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetDeployment()) Call interface method `SetDeployment`.
    #[zbus(name = "SetDeployment")]
    fn set_deployment(&self, deployment: String, interactive: bool) -> crate::zbus::Result<()>;

    /// [ğŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetLocation()) Call interface method `SetLocation`.
    #[zbus(name = "SetLocation")]
    fn set_location(&self, location: String, interactive: bool) -> crate::zbus::Result<()>;

    /// [ğŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#GetProductUUID()) Call interface method `GetProductUUID`.
    #[zbus(name = "GetProductUUID")]
    fn get_product_uuid(&self, interactive: bool) -> crate::zbus::Result<Vec<u8>>;

    /// [ğŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#GetHardwareSerial()) Call interface method `GetHardwareSerial`.
    #[zbus(name = "GetHardwareSerial")]
    fn get_hardware_serial(&self) -> crate::zbus::Result<String>;

    /// [ğŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#Describe()) Call interface method `Describe`.
    #[zbus(name = "Describe")]
    fn describe(&self) -> crate::zbus::Result<String>;

    /// Get property `Hostname`.
    #[zbus(property(emits_changed_signal = "true"), name = "Hostname")]
    fn hostname(&self) -> crate::zbus::Result<String>;

    /// Get property `StaticHostname`.
    #[zbus(property(emits_changed_signal = "true"), name = "StaticHostname")]
    fn static_hostname(&self) -> crate::zbus::Result<String>;

    /// Get property `PrettyHostname`.
    #[zbus(property(emits_changed_signal = "true"), name = "PrettyHostname")]
    fn pretty_hostname(&self) -> crate::zbus::Result<String>;

    /// Get property `DefaultHostname`.
    #[zbus(property(emits_changed_signal = "const"), name = "DefaultHostname")]
    fn default_hostname(&self) -> crate::zbus::Result<String>;

    /// Get property `HostnameSource`.
    #[zbus(property(emits_changed_signal = "true"), name = "HostnameSource")]
    fn hostname_source(&self) -> crate::zbus::Result<String>;

    /// Get property `IconName`.
    #[zbus(property(emits_changed_signal = "true"), name = "IconName")]
    fn icon_name(&self) -> crate::zbus::Result<String>;

    /// Get property `Chassis`.
    #[zbus(property(emits_changed_signal = "true"), name = "Chassis")]
    fn chassis(&self) -> crate::zbus::Result<String>;

    /// Get property `Deployment`.
    #[zbus(property(emits_changed_signal = "true"), name = "Deployment")]
    fn deployment(&self) -> crate::zbus::Result<String>;

    /// Get property `Location`.
    #[zbus(property(emits_changed_signal = "true"), name = "Location")]
    fn location(&self) -> crate::zbus::Result<String>;

    /// Get property `KernelName`.
    #[zbus(property(emits_changed_signal = "const"), name = "KernelName")]
    fn kernel_name(&self) -> crate::zbus::Result<String>;

    /// Get property `KernelRelease`.
    #[zbus(property(emits_changed_signal = "const"), name = "KernelRelease")]
    fn kernel_release(&self) -> crate::zbus::Result<String>;

    /// Get property `KernelVersion`.
    #[zbus(property(emits_changed_signal = "const"), name = "KernelVersion")]
    fn kernel_version(&self) -> crate::zbus::Result<String>;

    /// Get property `OperatingSystemPrettyName`.
    #[zbus(
        property(emits_changed_signal = "const"),
        name = "OperatingSystemPrettyName"
    )]
    fn operating_system_pretty_name(&self) -> crate::zbus::Result<String>;

    /// Get property `OperatingSystemCPEName`.
    #[zbus(
        property(emits_changed_signal = "const"),
        name = "OperatingSystemCPEName"
    )]
    fn operating_system_cpe_name(&self) -> crate::zbus::Result<String>;

    /// Get property `OperatingSystemSupportEnd`.
    #[zbus(
        property(emits_changed_signal = "const"),
        name = "OperatingSystemSupportEnd"
    )]
    fn operating_system_support_end(&self) -> crate::zbus::Result<u64>;

    /// Get property `HomeURL`.
    #[zbus(property(emits_changed_signal = "const"), name = "HomeURL")]
    fn home_url(&self) -> crate::zbus::Result<String>;

    /// Get property `HardwareVendor`.
    #[zbus(property(emits_changed_signal = "const"), name = "HardwareVendor")]
    fn hardware_vendor(&self) -> crate::zbus::Result<String>;

    /// Get property `HardwareModel`.
    #[zbus(property(emits_changed_signal = "const"), name = "HardwareModel")]
    fn hardware_model(&self) -> crate::zbus::Result<String>;

    /// Get property `FirmwareVersion`.
    #[zbus(property(emits_changed_signal = "const"), name = "FirmwareVersion")]
    fn firmware_version(&self) -> crate::zbus::Result<String>;

    /// Get property `FirmwareVendor`.
    #[zbus(property(emits_changed_signal = "const"), name = "FirmwareVendor")]
    fn firmware_vendor(&self) -> crate::zbus::Result<String>;

    /// Get property `FirmwareDate`.
    #[zbus(property(emits_changed_signal = "const"), name = "FirmwareDate")]
    fn firmware_date(&self) -> crate::zbus::Result<u64>;

    /// Get property `MachineID`.
    #[zbus(property(emits_changed_signal = "const"), name = "MachineID")]
    fn machine_id(&self) -> crate::zbus::Result<Vec<u8>>;

    /// Get property `BootID`.
    #[zbus(property(emits_changed_signal = "const"), name = "BootID")]
    fn boot_id(&self) -> crate::zbus::Result<Vec<u8>>;

    /// Get property `VSockCID`.
    #[zbus(property(emits_changed_signal = "const"), name = "VSockCID")]
    fn v_sock_cid(&self) -> crate::zbus::Result<u32>;
}
