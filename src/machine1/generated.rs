// This file is autogenerated, do not manually edit.

use crate::zbus::proxy;

/// Proxy object for `org.freedesktop.machine1.Manager`.
#[proxy(
    interface = "org.freedesktop.machine1.Manager",
    gen_blocking = false,
    default_service = "org.freedesktop.machine1",
    default_path = "/org/freedesktop/machine1"
)]
trait Manager {
    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#GetMachine()) Call interface method `GetMachine`.
    #[zbus(name = "GetMachine")]
    fn get_machine(&self, name: String) -> crate::zbus::Result<crate::zvariant::OwnedObjectPath>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#GetImage()) Call interface method `GetImage`.
    #[zbus(name = "GetImage")]
    fn get_image(&self, name: String) -> crate::zbus::Result<crate::zvariant::OwnedObjectPath>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#GetMachineByPID()) Call interface method `GetMachineByPID`.
    #[zbus(name = "GetMachineByPID")]
    fn get_machine_by_pid(&self, pid: u32)
        -> crate::zbus::Result<crate::zvariant::OwnedObjectPath>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#ListMachines()) Call interface method `ListMachines`.
    #[zbus(name = "ListMachines")]
    fn list_machines(
        &self,
    ) -> crate::zbus::Result<Vec<(String, String, String, crate::zvariant::OwnedObjectPath)>>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#ListImages()) Call interface method `ListImages`.
    #[zbus(name = "ListImages")]
    fn list_images(
        &self,
    ) -> crate::zbus::Result<
        Vec<(
            String,
            String,
            bool,
            u64,
            u64,
            u64,
            crate::zvariant::OwnedObjectPath,
        )>,
    >;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#CreateMachine()) Call interface method `CreateMachine`.
    #[zbus(name = "CreateMachine")]
    fn create_machine(
        &self,
        name: String,
        id: Vec<u8>,
        service: String,
        class: String,
        leader: u32,
        root_directory: String,
        scope_properties: Vec<(String, crate::zvariant::OwnedValue)>,
    ) -> crate::zbus::Result<crate::zvariant::OwnedObjectPath>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#CreateMachineWithNetwork()) Call interface method `CreateMachineWithNetwork`.
    #[zbus(name = "CreateMachineWithNetwork")]
    fn create_machine_with_network(
        &self,
        name: String,
        id: Vec<u8>,
        service: String,
        class: String,
        leader: u32,
        root_directory: String,
        ifindices: Vec<i32>,
        scope_properties: Vec<(String, crate::zvariant::OwnedValue)>,
    ) -> crate::zbus::Result<crate::zvariant::OwnedObjectPath>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#RegisterMachine()) Call interface method `RegisterMachine`.
    #[zbus(name = "RegisterMachine")]
    fn register_machine(
        &self,
        name: String,
        id: Vec<u8>,
        service: String,
        class: String,
        leader: u32,
        root_directory: String,
    ) -> crate::zbus::Result<crate::zvariant::OwnedObjectPath>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#RegisterMachineWithNetwork()) Call interface method `RegisterMachineWithNetwork`.
    #[zbus(name = "RegisterMachineWithNetwork")]
    fn register_machine_with_network(
        &self,
        name: String,
        id: Vec<u8>,
        service: String,
        class: String,
        leader: u32,
        root_directory: String,
        ifindices: Vec<i32>,
    ) -> crate::zbus::Result<crate::zvariant::OwnedObjectPath>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#UnregisterMachine()) Call interface method `UnregisterMachine`.
    #[zbus(name = "UnregisterMachine")]
    fn unregister_machine(&self, name: String) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#TerminateMachine()) Call interface method `TerminateMachine`.
    #[zbus(name = "TerminateMachine")]
    fn terminate_machine(&self, id: String) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#KillMachine()) Call interface method `KillMachine`.
    #[zbus(name = "KillMachine")]
    fn kill_machine(&self, name: String, whom: String, signal: i32) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#GetMachineAddresses()) Call interface method `GetMachineAddresses`.
    #[zbus(name = "GetMachineAddresses")]
    fn get_machine_addresses(&self, name: String) -> crate::zbus::Result<Vec<(i32, Vec<u8>)>>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#GetMachineSSHInfo()) Call interface method `GetMachineSSHInfo`.
    #[zbus(name = "GetMachineSSHInfo")]
    fn get_machine_ssh_info(&self, name: String) -> crate::zbus::Result<(String, String)>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#GetMachineOSRelease()) Call interface method `GetMachineOSRelease`.
    #[zbus(name = "GetMachineOSRelease")]
    fn get_machine_os_release(
        &self,
        name: String,
    ) -> crate::zbus::Result<::std::collections::HashMap<String, String>>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#OpenMachinePTY()) Call interface method `OpenMachinePTY`.
    #[zbus(name = "OpenMachinePTY")]
    fn open_machine_pty(
        &self,
        name: String,
    ) -> crate::zbus::Result<(crate::zvariant::OwnedFd, String)>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#OpenMachineLogin()) Call interface method `OpenMachineLogin`.
    #[zbus(name = "OpenMachineLogin")]
    fn open_machine_login(
        &self,
        name: String,
    ) -> crate::zbus::Result<(crate::zvariant::OwnedFd, String)>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#OpenMachineShell()) Call interface method `OpenMachineShell`.
    #[zbus(name = "OpenMachineShell")]
    fn open_machine_shell(
        &self,
        name: String,
        user: String,
        path: String,
        args: Vec<String>,
        environment: Vec<String>,
    ) -> crate::zbus::Result<(crate::zvariant::OwnedFd, String)>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#BindMountMachine()) Call interface method `BindMountMachine`.
    #[zbus(name = "BindMountMachine")]
    fn bind_mount_machine(
        &self,
        name: String,
        source: String,
        destination: String,
        read_only: bool,
        mkdir: bool,
    ) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#CopyFromMachine()) Call interface method `CopyFromMachine`.
    #[zbus(name = "CopyFromMachine")]
    fn copy_from_machine(
        &self,
        name: String,
        source: String,
        destination: String,
    ) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#CopyToMachine()) Call interface method `CopyToMachine`.
    #[zbus(name = "CopyToMachine")]
    fn copy_to_machine(
        &self,
        name: String,
        source: String,
        destination: String,
    ) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#CopyFromMachineWithFlags()) Call interface method `CopyFromMachineWithFlags`.
    #[zbus(name = "CopyFromMachineWithFlags")]
    fn copy_from_machine_with_flags(
        &self,
        name: String,
        source: String,
        destination: String,
        flags: u64,
    ) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#CopyToMachineWithFlags()) Call interface method `CopyToMachineWithFlags`.
    #[zbus(name = "CopyToMachineWithFlags")]
    fn copy_to_machine_with_flags(
        &self,
        name: String,
        source: String,
        destination: String,
        flags: u64,
    ) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#OpenMachineRootDirectory()) Call interface method `OpenMachineRootDirectory`.
    #[zbus(name = "OpenMachineRootDirectory")]
    fn open_machine_root_directory(
        &self,
        name: String,
    ) -> crate::zbus::Result<crate::zvariant::OwnedFd>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#GetMachineUIDShift()) Call interface method `GetMachineUIDShift`.
    #[zbus(name = "GetMachineUIDShift")]
    fn get_machine_uid_shift(&self, name: String) -> crate::zbus::Result<u32>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#RemoveImage()) Call interface method `RemoveImage`.
    #[zbus(name = "RemoveImage")]
    fn remove_image(&self, name: String) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#RenameImage()) Call interface method `RenameImage`.
    #[zbus(name = "RenameImage")]
    fn rename_image(&self, name: String, new_name: String) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#CloneImage()) Call interface method `CloneImage`.
    #[zbus(name = "CloneImage")]
    fn clone_image(
        &self,
        name: String,
        new_name: String,
        read_only: bool,
    ) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#MarkImageReadOnly()) Call interface method `MarkImageReadOnly`.
    #[zbus(name = "MarkImageReadOnly")]
    fn mark_image_read_only(&self, name: String, read_only: bool) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#GetImageHostname()) Call interface method `GetImageHostname`.
    #[zbus(name = "GetImageHostname")]
    fn get_image_hostname(&self, name: String) -> crate::zbus::Result<String>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#GetImageMachineID()) Call interface method `GetImageMachineID`.
    #[zbus(name = "GetImageMachineID")]
    fn get_image_machine_id(&self, name: String) -> crate::zbus::Result<Vec<u8>>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#GetImageMachineInfo()) Call interface method `GetImageMachineInfo`.
    #[zbus(name = "GetImageMachineInfo")]
    fn get_image_machine_info(
        &self,
        name: String,
    ) -> crate::zbus::Result<::std::collections::HashMap<String, String>>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#GetImageOSRelease()) Call interface method `GetImageOSRelease`.
    #[zbus(name = "GetImageOSRelease")]
    fn get_image_os_release(
        &self,
        name: String,
    ) -> crate::zbus::Result<::std::collections::HashMap<String, String>>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetPoolLimit()) Call interface method `SetPoolLimit`.
    #[zbus(name = "SetPoolLimit")]
    fn set_pool_limit(&self, size: u64) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetImageLimit()) Call interface method `SetImageLimit`.
    #[zbus(name = "SetImageLimit")]
    fn set_image_limit(&self, name: String, size: u64) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#CleanPool()) Call interface method `CleanPool`.
    #[zbus(name = "CleanPool")]
    fn clean_pool(&self, mode: String) -> crate::zbus::Result<Vec<(String, u64)>>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#MapFromMachineUser()) Call interface method `MapFromMachineUser`.
    #[zbus(name = "MapFromMachineUser")]
    fn map_from_machine_user(&self, name: String, uid_inner: u32) -> crate::zbus::Result<u32>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#MapToMachineUser()) Call interface method `MapToMachineUser`.
    #[zbus(name = "MapToMachineUser")]
    fn map_to_machine_user(
        &self,
        uid_outer: u32,
    ) -> crate::zbus::Result<(String, crate::zvariant::OwnedObjectPath, u32)>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#MapFromMachineGroup()) Call interface method `MapFromMachineGroup`.
    #[zbus(name = "MapFromMachineGroup")]
    fn map_from_machine_group(&self, name: String, gid_inner: u32) -> crate::zbus::Result<u32>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#MapToMachineGroup()) Call interface method `MapToMachineGroup`.
    #[zbus(name = "MapToMachineGroup")]
    fn map_to_machine_group(
        &self,
        gid_outer: u32,
    ) -> crate::zbus::Result<(String, crate::zvariant::OwnedObjectPath, u32)>;

    /// Receive `MachineNew` signal.
    #[zbus(signal, name = "MachineNew")]
    fn machine_new(
        &self,
        machine: String,
        path: crate::zvariant::OwnedObjectPath,
    ) -> crate::zbus::Result<()>;

    /// Receive `MachineRemoved` signal.
    #[zbus(signal, name = "MachineRemoved")]
    fn machine_removed(
        &self,
        machine: String,
        path: crate::zvariant::OwnedObjectPath,
    ) -> crate::zbus::Result<()>;

    /// Get property `PoolPath`.
    #[zbus(property(emits_changed_signal = "false"), name = "PoolPath")]
    fn pool_path(&self) -> crate::zbus::Result<String>;

    /// Get property `PoolUsage`.
    #[zbus(property(emits_changed_signal = "false"), name = "PoolUsage")]
    fn pool_usage(&self) -> crate::zbus::Result<u64>;

    /// Get property `PoolLimit`.
    #[zbus(property(emits_changed_signal = "false"), name = "PoolLimit")]
    fn pool_limit(&self) -> crate::zbus::Result<u64>;
}

/// Proxy object for `org.freedesktop.machine1.Machine`.
#[proxy(
    interface = "org.freedesktop.machine1.Machine",
    gen_blocking = false,
    default_service = "org.freedesktop.machine1",
    assume_defaults = false
)]
trait Machine {
    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#Terminate()) Call interface method `Terminate`.
    #[zbus(name = "Terminate")]
    fn terminate(&self) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#Kill()) Call interface method `Kill`.
    #[zbus(name = "Kill")]
    fn kill(&self, whom: String, signal: i32) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#GetAddresses()) Call interface method `GetAddresses`.
    #[zbus(name = "GetAddresses")]
    fn get_addresses(&self) -> crate::zbus::Result<Vec<(i32, Vec<u8>)>>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#GetSSHInfo()) Call interface method `GetSSHInfo`.
    #[zbus(name = "GetSSHInfo")]
    fn get_ssh_info(&self) -> crate::zbus::Result<(String, String)>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#GetOSRelease()) Call interface method `GetOSRelease`.
    #[zbus(name = "GetOSRelease")]
    fn get_os_release(&self) -> crate::zbus::Result<::std::collections::HashMap<String, String>>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#GetUIDShift()) Call interface method `GetUIDShift`.
    #[zbus(name = "GetUIDShift")]
    fn get_uid_shift(&self) -> crate::zbus::Result<u32>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#OpenPTY()) Call interface method `OpenPTY`.
    #[zbus(name = "OpenPTY")]
    fn open_pty(&self) -> crate::zbus::Result<(crate::zvariant::OwnedFd, String)>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#OpenLogin()) Call interface method `OpenLogin`.
    #[zbus(name = "OpenLogin")]
    fn open_login(&self) -> crate::zbus::Result<(crate::zvariant::OwnedFd, String)>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#OpenShell()) Call interface method `OpenShell`.
    #[zbus(name = "OpenShell")]
    fn open_shell(
        &self,
        user: String,
        path: String,
        args: Vec<String>,
        environment: Vec<String>,
    ) -> crate::zbus::Result<(crate::zvariant::OwnedFd, String)>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#BindMount()) Call interface method `BindMount`.
    #[zbus(name = "BindMount")]
    fn bind_mount(
        &self,
        source: String,
        destination: String,
        read_only: bool,
        mkdir: bool,
    ) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#CopyFrom()) Call interface method `CopyFrom`.
    #[zbus(name = "CopyFrom")]
    fn copy_from(&self, source: String, destination: String) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#CopyTo()) Call interface method `CopyTo`.
    #[zbus(name = "CopyTo")]
    fn copy_to(&self, source: String, destination: String) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#CopyFromWithFlags()) Call interface method `CopyFromWithFlags`.
    #[zbus(name = "CopyFromWithFlags")]
    fn copy_from_with_flags(
        &self,
        source: String,
        destination: String,
        flags: u64,
    ) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#CopyToWithFlags()) Call interface method `CopyToWithFlags`.
    #[zbus(name = "CopyToWithFlags")]
    fn copy_to_with_flags(
        &self,
        source: String,
        destination: String,
        flags: u64,
    ) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#OpenRootDirectory()) Call interface method `OpenRootDirectory`.
    #[zbus(name = "OpenRootDirectory")]
    fn open_root_directory(&self) -> crate::zbus::Result<crate::zvariant::OwnedFd>;

    /// Get property `Name`.
    #[zbus(property(emits_changed_signal = "const"), name = "Name")]
    fn name(&self) -> crate::zbus::Result<String>;

    /// Get property `Id`.
    #[zbus(property(emits_changed_signal = "const"), name = "Id")]
    fn id(&self) -> crate::zbus::Result<Vec<u8>>;

    /// Get property `Timestamp`.
    #[zbus(property(emits_changed_signal = "const"), name = "Timestamp")]
    fn timestamp(&self) -> crate::zbus::Result<u64>;

    /// Get property `TimestampMonotonic`.
    #[zbus(property(emits_changed_signal = "const"), name = "TimestampMonotonic")]
    fn timestamp_monotonic(&self) -> crate::zbus::Result<u64>;

    /// Get property `Service`.
    #[zbus(property(emits_changed_signal = "const"), name = "Service")]
    fn service(&self) -> crate::zbus::Result<String>;

    /// Get property `Unit`.
    #[zbus(property(emits_changed_signal = "const"), name = "Unit")]
    fn unit(&self) -> crate::zbus::Result<String>;

    /// Get property `Leader`.
    #[zbus(property(emits_changed_signal = "const"), name = "Leader")]
    fn leader(&self) -> crate::zbus::Result<u32>;

    /// Get property `Class`.
    #[zbus(property(emits_changed_signal = "const"), name = "Class")]
    fn class(&self) -> crate::zbus::Result<String>;

    /// Get property `RootDirectory`.
    #[zbus(property(emits_changed_signal = "const"), name = "RootDirectory")]
    fn root_directory(&self) -> crate::zbus::Result<String>;

    /// Get property `NetworkInterfaces`.
    #[zbus(property(emits_changed_signal = "const"), name = "NetworkInterfaces")]
    fn network_interfaces(&self) -> crate::zbus::Result<Vec<i32>>;

    /// Get property `VSockCID`.
    #[zbus(property(emits_changed_signal = "const"), name = "VSockCID")]
    fn v_sock_cid(&self) -> crate::zbus::Result<u32>;

    /// Get property `SSHAddress`.
    #[zbus(property(emits_changed_signal = "const"), name = "SSHAddress")]
    fn ssh_address(&self) -> crate::zbus::Result<String>;

    /// Get property `SSHPrivateKeyPath`.
    #[zbus(property(emits_changed_signal = "const"), name = "SSHPrivateKeyPath")]
    fn ssh_private_key_path(&self) -> crate::zbus::Result<String>;

    /// Get property `State`.
    #[zbus(property(emits_changed_signal = "false"), name = "State")]
    fn state(&self) -> crate::zbus::Result<String>;
}
